{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///C:/CodeProjects/Photography-Managing-App/my-app/src/utils/supabase/server.js"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\r\nimport { cookies } from 'next/headers'\r\n\r\nexport async function createClient() {\r\n  const cookieStore = await cookies()\r\n\r\n  // Create a server's supabase client with newly configured cookie,\r\n  // which could be used to maintain user's session\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) =>\r\n              cookieStore.set(name, value, options)\r\n            )\r\n          } catch {\r\n            // The `setAll` method was called from a Server Component.\r\n            // This can be ignored if you have middleware refreshing\r\n            // user sessions.\r\n          }\r\n        },\r\n      },\r\n    }\r\n  )\r\n}"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,kEAAkE;IAClE,iDAAiD;IACjD,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,uUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///C:/CodeProjects/Photography-Managing-App/my-app/src/app/api/get-shoots/route.js"],"sourcesContent":["export const dynamic = 'force-dynamic';\r\nimport { createClient } from '@/utils/supabase/server';\r\nimport { cookies } from 'next/headers';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\n/**\r\n * GET handler for retrieving shoots data for the authenticated user\r\n * This endpoint fetches shoots from Supabase based on the current user's authentication\r\n */\r\nexport async function GET() {\r\n  try {/*\r\n    // Get the cookie store from Next.js headers\r\n    const cookieStore = await cookies();\r\n    \r\n    // Retrieve the Supabase authentication token from cookies\r\n    // This cookie name should match your Supabase project configuration\r\n    const authCookie = cookieStore.get('sb-ytzzsjhqmtijrjzngfhv-auth-token')?.value;\r\n    \r\n    // Check if the authentication cookie exists\r\n    if (!authCookie) {\r\n      return new Response(\r\n        JSON.stringify({ data: null, error: 'User not authenticated (no token)' }),\r\n        { \r\n          status: 401,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n\r\n    // Parse the authentication cookie to extract session data\r\n    let session;\r\n    let accessToken;\r\n    console.log(cookieStore.getAll())\r\n    // Handle base64-encoded cookie format (common with Supabase)\r\n    if (authCookie.startsWith('base64-')) {\r\n      try {\r\n        // Remove the \"base64-\" prefix and decode the cookie data\r\n        const base64Data = authCookie.substring(7); // Remove \"base64-\" (7 characters)\r\n        const decodedData = Buffer.from(base64Data, 'base64').toString('utf-8');\r\n        session = JSON.parse(decodedData);\r\n        accessToken = session?.access_token;\r\n      } catch (error) {\r\n        // Return error if base64 decoding or JSON parsing fails\r\n        return new Response(\r\n          JSON.stringify({ data: null, error: 'Invalid session format' }),\r\n          { \r\n            status: 401,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          }\r\n        );\r\n      }\r\n    } else {\r\n      // Handle non-base64 cookie format (fallback)\r\n      try {\r\n        session = JSON.parse(authCookie);\r\n        accessToken = session?.access_token;\r\n      } catch (error) {\r\n        // Return error if JSON parsing fails\r\n        return new Response(\r\n          JSON.stringify({ data: null, error: 'Invalid session format' }),\r\n          { \r\n            status: 401,\r\n            headers: { 'Content-Type': 'application/json' }\r\n          }\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Verify that we successfully extracted an access token\r\n    if (!accessToken) {\r\n      return new Response(\r\n        JSON.stringify({ data: null, error: 'User not authenticated (no token)' }),\r\n        { \r\n          status: 401,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }*/\r\n\r\n    // Create Supabase client with the extracted access token\r\n    // This ensures all subsequent queries are authenticated\r\n    console.log(1)\r\n    const supabase = await createClient()/*supabaseUrl, supabaseAnonKey, {\r\n      global: {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      },\r\n    });*/\r\n\r\n    console.log(2)\r\n    // Verify the user authentication by fetching user data\r\n    const {\r\n      data: { user },\r\n      error: userError,\r\n    } = await supabase.auth.getUser();\r\n    console.log(3)\r\n\r\n    // Check if user retrieval was successful\r\n    if (!user || userError) {\r\n      return new Response(\r\n        JSON.stringify({ \r\n          data: null, \r\n          error: userError?.message || 'Failed to retrieve user' \r\n        }),\r\n        { \r\n          status: 401,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n\r\n    // Query the shoots table for the authenticated user's data\r\n    // This query respects Row Level Security (RLS) policies if enabled\r\n    const { data, error } = await supabase\r\n      .from('shoots')\r\n      .select('*')\r\n      .eq('user', user.id)\r\n      .limit(5);\r\n\r\n    // Handle database query errors\r\n    if (error) {\r\n      return new Response(\r\n        JSON.stringify({ \r\n          data: null, \r\n          error: error.message || 'Database query failed' \r\n        }),\r\n        { \r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        }\r\n      );\r\n    }\r\n    // Return successful response with shoots data\r\n    return new Response(\r\n      JSON.stringify({ data, error: null }),\r\n      { \r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n\r\n  } catch (error) {\r\n    // Handle any unexpected errors that occur during the request\r\n    return new Response(\r\n      JSON.stringify({ \r\n        data: null, \r\n        error: error.message || 'Internal server error' \r\n      }),\r\n      { \r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AAFO,MAAM,UAAU;;;AAIvB,MAAM;AACN,MAAM;AAMC,eAAe;IACpB,IAAI;QAqEF,yDAAyD;QACzD,wDAAwD;QACxD,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,MAAM,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAAG;;;;;;OAMlC,GAEH,QAAQ,GAAG,CAAC;QACZ,uDAAuD;QACvD,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACd,OAAO,SAAS,EACjB,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAC/B,QAAQ,GAAG,CAAC;QAEZ,yCAAyC;QACzC,IAAI,CAAC,QAAQ,WAAW;YACtB,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,MAAM;gBACN,OAAO,WAAW,WAAW;YAC/B,IACA;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QAEJ;QAEA,2DAA2D;QAC3D,mEAAmE;QACnE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,UACL,MAAM,CAAC,KACP,EAAE,CAAC,QAAQ,KAAK,EAAE,EAClB,KAAK,CAAC;QAET,+BAA+B;QAC/B,IAAI,OAAO;YACT,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,MAAM;gBACN,OAAO,MAAM,OAAO,IAAI;YAC1B,IACA;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QAEJ;QACA,8CAA8C;QAC9C,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE;YAAM,OAAO;QAAK,IACnC;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAGJ,EAAE,OAAO,OAAO;QACd,6DAA6D;QAC7D,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,MAAM;YACN,OAAO,MAAM,OAAO,IAAI;QAC1B,IACA;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF","debugId":null}}]
}