{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///C:/CodeProjects/Photography-Managing-App/my-app/src/utils/supabase/server.js"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\r\nimport { cookies } from 'next/headers'\r\n\r\nexport async function createClient() {\r\n  const cookieStore = await cookies()\r\n\r\n  // Create a server's supabase client with newly configured cookie,\r\n  // which could be used to maintain user's session\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) =>\r\n              cookieStore.set(name, value, options)\r\n            )\r\n          } catch {\r\n            // The `setAll` method was called from a Server Component.\r\n            // This can be ignored if you have middleware refreshing\r\n            // user sessions.\r\n          }\r\n        },\r\n      },\r\n    }\r\n  )\r\n}"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,kEAAkE;IAClE,iDAAiD;IACjD,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///C:/CodeProjects/Photography-Managing-App/my-app/src/app/auth/signout/route.js"],"sourcesContent":["import { createClient } from '@/utils/supabase/server'\r\nimport { revalidatePath } from 'next/cache'\r\nimport { NextResponse } from 'next/server'\r\n\r\nexport async function POST(req) {\r\n  const supabase = await createClient()\r\n\r\n  // Check if a user's logged in\r\n  const {\r\n    data: { user },\r\n  } = await supabase.auth.getUser()\r\n\r\n  if (user) {\r\n    await supabase.auth.signOut()\r\n  }\r\n\r\n  revalidatePath('/', 'layout')\r\n  return NextResponse.redirect(new URL('/login', req.url), {\r\n    status: 302,\r\n  })\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAG;IAC5B,MAAM,WAAW,MAAM,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;IAElC,8BAA8B;IAC9B,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE/B,IAAI,MAAM;QACR,MAAM,SAAS,IAAI,CAAC,OAAO;IAC7B;IAEA,CAAA,GAAA,+HAAA,CAAA,iBAAc,AAAD,EAAE,KAAK;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG,GAAG;QACvD,QAAQ;IACV;AACF","debugId":null}}]
}