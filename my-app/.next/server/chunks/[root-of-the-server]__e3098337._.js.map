{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///home/vsingh/Photography-Managing-App/my-app/src/app/api/get-shoots/route.js"],"sourcesContent":["export const dynamic = 'force-dynamic';\nimport { createClient } from '@supabase/supabase-js';\nimport { cookies } from 'next/headers';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n/**\n * GET handler for retrieving shoots data for the authenticated user\n * This endpoint fetches shoots from Supabase based on the current user's authentication\n */\nexport async function GET() {\n  try {\n    // Get the cookie store from Next.js headers\n    const cookieStore = await cookies();\n    \n    // Retrieve the Supabase authentication token from cookies\n    // This cookie name should match your Supabase project configuration\n    const authCookie = cookieStore.get('sb-ytzzsjhqmtijrjzngfhv-auth-token')?.value;\n    \n    // Check if the authentication cookie exists\n    if (!authCookie) {\n      return new Response(\n        JSON.stringify({ data: null, error: 'User not authenticated (no token)' }),\n        { \n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    // Parse the authentication cookie to extract session data\n    let session;\n    let accessToken;\n\n    // Handle base64-encoded cookie format (common with Supabase)\n    if (authCookie.startsWith('base64-')) {\n      try {\n        // Remove the \"base64-\" prefix and decode the cookie data\n        const base64Data = authCookie.substring(7); // Remove \"base64-\" (7 characters)\n        const decodedData = Buffer.from(base64Data, 'base64').toString('utf-8');\n        session = JSON.parse(decodedData);\n        accessToken = session?.access_token;\n      } catch (error) {\n        // Return error if base64 decoding or JSON parsing fails\n        return new Response(\n          JSON.stringify({ data: null, error: 'Invalid session format' }),\n          { \n            status: 401,\n            headers: { 'Content-Type': 'application/json' }\n          }\n        );\n      }\n    } else {\n      // Handle non-base64 cookie format (fallback)\n      try {\n        session = JSON.parse(authCookie);\n        accessToken = session?.access_token;\n      } catch (error) {\n        // Return error if JSON parsing fails\n        return new Response(\n          JSON.stringify({ data: null, error: 'Invalid session format' }),\n          { \n            status: 401,\n            headers: { 'Content-Type': 'application/json' }\n          }\n        );\n      }\n    }\n    \n    // Verify that we successfully extracted an access token\n    if (!accessToken) {\n      return new Response(\n        JSON.stringify({ data: null, error: 'User not authenticated (no token)' }),\n        { \n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    // Create Supabase client with the extracted access token\n    // This ensures all subsequent queries are authenticated\n    const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n      global: {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      },\n    });\n\n    // Verify the user authentication by fetching user data\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n\n    // Check if user retrieval was successful\n    if (!user || userError) {\n      return new Response(\n        JSON.stringify({ \n          data: null, \n          error: userError?.message || 'Failed to retrieve user' \n        }),\n        { \n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        }\n      );\n    }\n\n    // Query the shoots table for the authenticated user's data\n    // This query respects Row Level Security (RLS) policies if enabled\n    const { data, error } = await supabase\n      .from('shoots')\n      .select('*')\n      .eq('user', user.id)\n      .order('date', {ascending: false})\n      .order('time', {ascending: false})\n      .limit(5);\n\n    // Handle database query errors\n    if (error) {\n      return new Response(\n        JSON.stringify({ \n          data: null, \n          error: error.message || 'Database query failed' \n        }),\n        { \n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        }\n      );\n    }\n    // Return successful response with shoots data\n    return new Response(\n      JSON.stringify({ data, error: null }),\n      { \n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }\n    );\n\n  } catch (error) {\n    // Handle any unexpected errors that occur during the request\n    return new Response(\n      JSON.stringify({ \n        data: null, \n        error: error.message || 'Internal server error' \n      }),\n      { \n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}